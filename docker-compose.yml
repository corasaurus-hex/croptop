services:
  postgres:
    image: postgis/postgis:16-3.4
    platform: linux/amd64
    restart: always
    ports:
      - "5656:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: croptoppassword
      POSTGRES_USER: croptopuser
      POSTGRES_DB: croptopdb
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U croptopuser"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 30s
  graphql-engine:
    image: hasura/graphql-engine:v2.42.0.cli-migrations-v3
    ports:
      - "8080:8080"
    restart: always
    environment:
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://croptopuser:croptoppassword@postgres:5432/croptopdb
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://croptopuser:croptoppassword@postgres:5432/croptopdb
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
      # HASURA_GRAPHQL_METADATA_DEFAULTS: '{}'
    volumes:
      - ./tests/fixtures/hasura/metadata:/hasura-metadata
      - ./tests/fixtures/hasura/migrations:/hasura-migrations
      - ./tests/fixtures/hasura/seeds:/hasura-seeds
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/healthz?strict=true"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  db_data:
